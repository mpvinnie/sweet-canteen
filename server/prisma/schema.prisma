// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ATTENDANT
  COOK
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  createdAt    DateTime @default(now()) @map("created_at")

  orders Order[]

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model Product {
  id                String    @id @default(uuid())
  name              String
  description       String
  priceInCents      Int
  available         Boolean   @default(false)
  availableQuantity Int
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]

  @@map("products")
}

enum OrderStatus {
  PENDING
  PROCESSING
  ON_HOLD
  CANCELED
  FINISHED
  COMPLETED
}

model Order {
  id           String      @id @default(uuid())
  customerName String      @map("customer_name")
  status       OrderStatus
  observation  String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime?   @updatedAt @map("updated_at")

  attendantId String @map("attendant_id")
  attendant   User   @relation(fields: [attendantId], references: [id])

  orderItems OrderItem[] @relation("OrderToOrderItems")

  @@map("orders")
}

model OrderItem {
  id               String @id @default(uuid())
  productName      String
  quantity         Int
  unitPriceInCents Int

  orderId String @map("order_id")
  order   Order  @relation("OrderToOrderItems", fields: [orderId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("orderItems")
}
